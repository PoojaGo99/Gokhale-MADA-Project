---
title: "Processing raw data from FAERS"
output: html_document
---


# Processing script

This quarto file has the code to process the raw data.


# Setup

Load needed packages. make sure they are installed.

```{r}
library(readxl) #for loading Excel files
library(dplyr) #for data processing/cleaning
library(tidyr) #for data processing/cleaning
library(skimr) #for nice visualization of data 
library(here) #to set paths
```


# Data loading

Loading the data into R

```{r}
# path to data
# note the use of the here() package and not absolute paths
data_location <- here::here("data","raw-data","ICI_FAERS.xlsx")
ici_rawdata <- readxl::read_excel(data_location)
```


# Check data

First we look at the data

```{r}
glimpse(ici_rawdata)
summary(ici_rawdata)
```


# Cleaning the data

First, let's rename all the columns to make them easier to use in R.

```{r}
library(janitor)
ici_rawdata = ici_rawdata %>%
  clean_names()
```


Since our focus is on immune checkpoint inhibitors, we remove any cases where concomitant products are available.

```{r}
ici_rawdata = ici_rawdata %>%
  filter(concomitant_product_names == "-")
```

We now have 1860 cases.

The next step is to remove cases where other drugs are also present in the suspect product active ingredients.

```{r}
library(stringr)
#First create a vector of valid drugs
valid_drugs = c("Atezolizumab", "Nivolumab", "Pembrolizumab", "Avelumab")

#Filter the data
ici_data1 = ici_rawdata %>%
  filter(
    tolower(suspect_product_active_ingredients) %in% tolower(valid_drugs)
  )
```

There are now 1398 cases in the data.

The next step is to filter the data to retain only immune-related adverse events (irAEs)

Now, we will filter the reactions - and retain only irAEs.
Common irAEs have been included - sourced from 2 separate reviews. The details are provided in the methods section.

```{r}
# Create a vector of specific reactions you want to match
reactions_of_interest <- c(
  "colitis", "hyperthyroidism", "hypothyroidism", "hepatitis", "pruritus", "rash", 
  "pneumonitis", "myocarditis", "pericarditis", "dermatitis", "Stevens-Johnson syndrome", 
  "sjogren's syndrome", "toxic epidermal necrolysis", "hypophysitis", "autoimmune diabetes", 
  "pancreatitis", "myositis", "uveitis", "episcleritis", "nephritis", "peripheral neuropathy", "myelitis", "encephalitis", "erythema", "autoimmune", "psoriasis", "adrenal", "adrenitis", "hypercortisolism", "hypocortisolism" ,"hyperparathyroidism", "hypoparathyroidism", "hypogonadism", "thyroiditis", "graves", "thyrotoxicosis", "enterocolitis", "ileitis", "ileocolitis", "myasthenia", "neuritis", "arthritis", "lupus", "sarcoidosis", "vasculitis", "immune"
)

#Reactions with irAES
ici_data_subset <- ici_data1 %>%
  filter(str_detect(tolower(reactions), paste(tolower(reactions_of_interest), collapse = "|")))

#Reactions with irAEs
ici_data_non_irae <- ici_data1 %>%
  filter(!str_detect(tolower(reactions), paste(tolower(reactions_of_interest), collapse = "|")))

# View the subset
View(ici_data_subset)
```

We have 369 reactions.
The next step is to characterize and categorize the irAEs.
The first step is to split the reaction column, and keep only the irAEs.

```{r}
library(tidyr)

ici_data_split <- ici_data_subset %>%
  separate(reactions, into = paste0("reaction_", 1:15), sep = ";", remove = FALSE, extra = "drop")

# View the result
View(ici_data_split)

reaction_columns <- paste0("reaction_", 1:15)

##Only retain irAEs
ici_data_split <- ici_data_split %>%
  mutate(across(all_of(reaction_columns), 
                ~ if_else(str_detect(tolower(.), paste(gsub("'", "\\\\'", reactions_of_interest), collapse = "|")), 
                          ., NA_character_)))

```

Now, we combine the columns and remove the NAs.
```{r}
# Define columns to shift
cols_to_shift <- paste0("reaction_", 1:15)
cols_to_keep <- setdiff(names(ici_data_split), cols_to_shift)

# Function to shift non-NA values left within each row
shift_non_na <- function(row) {
  non_na_values <- na.omit(row)  # Get non-NA values
  c(non_na_values, rep(NA, length(row) - length(non_na_values)))  # Fill rest with NA
}

# Apply function only to reaction_* columns
ici_data_split[cols_to_shift] <- t(apply(ici_data_split[cols_to_shift], 1, shift_non_na))

# Remove columns where all variables are NA
ici_data_cleaned = ici_data_split %>% select(where( ~ !all(is.na(.))))
```

The next step is to code these reactions using MedDRA Preferred Terms (PTs), which is a distinct descriptor (single medical concept) for a symptom, sign, disease diagnosis, therapeutic indication, investigation, surgical or medical procedure, and medical social or family history characteristic.
After going through the list of reactions, I found that the reactions are already in PTs.

The next step is to remove any duplicates. We will remove reports that have identical age, weight, FDA received date, country of occurrence, suspected active ingredient, and reported reaction.

```{r}
# Find duplicates based on specified columns
duplicates <- ici_data_cleaned %>%
  group_by(suspect_product_active_ingredients, sex, patient_age, patient_weight, reactions, initial_fda_received_date, country_where_event_occurred) %>%
  filter(n() > 1) %>%
  ungroup()

# Display the duplicates
print(duplicates)
```

We see that there are 4 duplicates of 1 case.
We remove these.

```{r}
ici_data_cleaned = ici_data_cleaned %>%
  distinct(suspect_product_active_ingredients, sex, patient_age, patient_weight, reactions, initial_fda_received_date, country_where_event_occurred, .keep_all = TRUE)
```


Now, the next step is to remove columns that are not required.

```{r}
ici_data_final = ici_data_cleaned %>%
  select(-reactions)
```

Now, we convert the patient age data to numeric.

```{r}
ici_data_final <- ici_data_final %>%
  mutate(patient_age = as.numeric(gsub("[^0-9]", "", patient_age)))
```

Let us classify the countries into US and Outside US
```{r}
ici_data_final <- ici_data_final %>%
  mutate(country_where_event_occurred = case_when(
    country_where_event_occurred == "US" ~ "US",
    country_where_event_occurred != "US" & country_where_event_occurred != "Not Specified" ~ "Outside US",
    TRUE ~ country_where_event_occurred
  ))

```

The next step is to classify the irAEs by the System Organ Class (SOC) according to MedDRA.

```{r}
library(dplyr)

# Define lists of reaction keywords for each organ system
Skin_and_subcutaneous_tissue_disorders <- c("rash", "pruritus", "dermatitis", "psoriasis")
Gastrointestinal_disorders <- c("colitis", "hepatitis", "pancreatitis", "enterocolitis", "ileitis", "ileocolitis")
Nervous_system_disorders <- c("myasthenia", "graves", "myelitis", "encephalitis", "neuritis", "peripheral neuropathy")
Endocrine_disorders <- c("hyperthyroidism", "hypothyroidism", "thyroiditis", "thyrotoxicosis", "adrenitis", "adrenal", "hypogonadism", "hyperparathyroidism", "hypercortisolism", "hypophysitis", "hypoparathyroidism", "hypocortisolism", "autoimmune diabetes")
Cardiac_disorders <- c("myocarditis", "pericarditis", "myocarditis")
Respiratory_thoracic_and_mediastinal_disorders <- c("pneumonitis")
Renal_and_urinary_disorders <- c("pyelonephritis", "nephritis")

# Function to classify reactions into organ systems
classify_reaction <- function(reaction) {
  case_when(
    !is.na(reaction) & grepl(paste(Skin_and_subcutaneous_tissue_disorders, collapse = "|"), reaction, ignore.case = TRUE) ~ "Skin",
    !is.na(reaction) & grepl(paste(Gastrointestinal_disorders, collapse = "|"), reaction, ignore.case = TRUE) ~ "Gastrointestinal",
    !is.na(reaction) & grepl(paste(Nervous_system_disorders, collapse = "|"), reaction, ignore.case = TRUE) ~ "Neurological",
    !is.na(reaction) & grepl(paste(Endocrine_disorders, collapse = "|"), reaction, ignore.case = TRUE) ~ "Endocrinological",
    !is.na(reaction) & grepl(paste(Cardiac_disorders, collapse = "|"), reaction, ignore.case = TRUE) ~ "Cardiovascular",
    !is.na(reaction) & grepl(paste(Respiratory_thoracic_and_mediastinal_disorders, collapse = "|"), reaction, ignore.case = TRUE) ~ "Respiratory",
    !is.na(reaction) & grepl(paste(Renal_and_urinary_disorders, collapse = "|"), reaction, ignore.case = TRUE) ~ "Renal",
    !is.na(reaction) ~ "Other",  # If not NA and no match, classify as Other
    TRUE ~ NA_character_  # If NA, keep as NA
  )
}

# Apply the function to each reaction column
ici_data_final <- ici_data_final %>%
  mutate(
    organ_system_1 = classify_reaction(reaction_1),
    organ_system_2 = classify_reaction(reaction_2),
    organ_system_3 = classify_reaction(reaction_3),
    organ_system_4 = classify_reaction(reaction_4),
    organ_system_5 = classify_reaction(reaction_5)
  )

# Check the new columns
head(ici_data_final)

```
Now, let us split the outcomes column.

```{r}
library(tidyr)

ici_data_final <- ici_data_final %>%
  separate(outcomes, into = paste0("outcome_", 1:2), sep = ";", remove = FALSE, extra = "drop")

# If outcome is died, removing other outcomes for that report
ici_data_final$outcome_1[!is.na(ici_data_final$outcome_1) & ici_data_final$outcome_2 == "Died"] <- NA
ici_data_final$outcome_2[!is.na(ici_data_final$outcome_2) & ici_data_final$outcome_1 == "Died"] <- NA

#If outcome is hospitalized, removing other outcomes for that report
ici_data_final$outcome_1[!is.na(ici_data_final$outcome_1) & ici_data_final$outcome_2 == "Hospitalized"] <- NA
ici_data_final$outcome_2[!is.na(ici_data_final$outcome_2) & ici_data_final$outcome_1 == "Hospitalized"] <- NA

#If outcome is life threatening, removing other outcomes for that report
ici_data_final$outcome_1[!is.na(ici_data_final$outcome_1) & ici_data_final$outcome_2 == "Life Threatening"] <- NA
ici_data_final$outcome_2[!is.na(ici_data_final$outcome_2) & ici_data_final$outcome_1 == "Life Threatening"] <- NA

#If outcome is disabled, removing other outcomes for that report
ici_data_final$outcome_1[!is.na(ici_data_final$outcome_1) & ici_data_final$outcome_2 == "Disabled"] <- NA
ici_data_final$outcome_2[!is.na(ici_data_final$outcome_2) & ici_data_final$outcome_1 == "Disabled"] <- NA

#Merge the columns
ici_data_final$outcomes <- coalesce(ici_data_final$outcome_1, ici_data_final$outcome_2)  # Merge outcome_1 and outcome_2
ici_data_final$outcome_1 <- NULL  # Remove outcome_1 column
ici_data_final$outcome_2 <- NULL  # Remove outcome_2 column

# View the result
View(ici_data_final)

```


This is our final data.
Next, we move on to exploratory data analysis.


Let's assign at the end to some final variable, this makes it easier to add further cleaning steps above.

```{r}
processeddata = ici_data_final
```


# Save data 

Finally, we save the clean data as RDS file. 

```{r}
save_data_location <- here::here("data","processed-data","processeddata.rds")
saveRDS(processeddata, file = save_data_location)
```


Since we will need the number of reactions other than irAEs for the further analysis, we summarize that information here.

```{r}
glimpse(ici_data_non_irae)
```

First, let us split the reactions column
```{r}
library(tidyr)

ici_data_non_irae <- ici_data_non_irae %>%
  separate(reactions, into = paste0("reaction_", 1:15), sep = ";", remove = FALSE, extra = "drop")

# View the result
View(ici_data_non_irae)

reaction_columns <- paste0("reaction_", 1:15)
```

We remove any duplicates.
```{r}
duplicates1 <- ici_data_non_irae %>%
  group_by(suspect_product_active_ingredients, sex, patient_age, patient_weight, reactions, initial_fda_received_date, country_where_event_occurred) %>%
  filter(n() > 1) %>%
  ungroup()

# Display the duplicates
print(duplicates1)
```

We see multiple duplicates. Let us remove them.
```{r}
ici_data_clean_non_irae = ici_data_non_irae %>%
  distinct(suspect_product_active_ingredients, sex, patient_age, patient_weight, reactions, initial_fda_received_date, country_where_event_occurred, .keep_all = TRUE)

View(ici_data_clean_non_irae)
```

We will need this data in the disproportionality analysis.

We save this data as well.

```{r}
processeddata1 = ici_data_clean_non_irae
save_data_location <- here::here("data","processed-data","processeddata1.rds")
saveRDS(processeddata1, file = save_data_location)
```

