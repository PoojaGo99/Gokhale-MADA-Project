mutate(Hyperthyroidism = sum(c_across(starts_with("reaction_")) == "Hyperthyroidism", na.rm = TRUE)) %>%
group_by(suspect_product_active_ingredients) %>%
summarise(Hyperthyroidism_Count = sum(Hyperthyroidism))
# Print the result
print(hyperthyroidism_counts)
# Ensure the data frames are in the same order
results_irae <- results_irae %>%
arrange(Drug)
hyperthyroidism_counts <- hyperthyroidism_counts %>%
arrange(suspect_product_active_ingredients)
# Subtract 'Hyperthyroidism' counts from total reactions
results_non_hyperthyroidism <- results_irae %>%
mutate(
Non_Hyperthyroidism_Reactions = Total_Reactions - hyperthyroidism_counts$Hyperthyroidism_Count
)
# Print the updated results
print(results_non_hyperthyroidism)
# Create the new dataset by adding Non_Rash_Reactions to Total_Reactions
results_other_hyperthyroidism <- data.frame(
Drug = results_non_irae$Drug,
Total_Reactions = results_non_irae$Total_Reactions + results_non_hyperthyroidism$Non_Hyperthyroidism_Reactions
)
# Print the new dataset
print(results_other_hyperthyroidism)
# Load necessary library
library(dplyr)
# Define the list of drugs
drugs <- c("Atezolizumab", "Avelumab", "Nivolumab", "Pembrolizumab")
# Initialize an empty data frame to store results for Hyperthyroidism
results_table_hyperthyroidism <- data.frame()
# Loop through each drug and perform the analysis for Hyperthyroidism
for (drug_of_interest in drugs) {
# Extract a, b, c, d for the current drug (for Hyperthyroidism)
a_hyperthyroidism <- hyperthyroidism_counts %>% filter(suspect_product_active_ingredients == drug_of_interest) %>% pull(Hyperthyroidism_Count)
b_hyperthyroidism <- results_other_hyperthyroidism %>% filter(Drug == drug_of_interest) %>% pull(Total_Reactions)
c_hyperthyroidism <- hyperthyroidism_counts %>% filter(suspect_product_active_ingredients != drug_of_interest) %>% summarise(sum(Hyperthyroidism_Count)) %>% pull()
d_hyperthyroidism <- results_other_hyperthyroidism %>% filter(Drug != drug_of_interest) %>% summarise(sum(Total_Reactions)) %>% pull()
# Step 1: Calculate PRR (Proportional Reporting Ratio)
prr <- (a_hyperthyroidism / (a_hyperthyroidism + b_hyperthyroidism)) / (c_hyperthyroidism / (c_hyperthyroidism + d_hyperthyroidism))
# Step 2: Calculate the 95% confidence interval for PRR
se_log_prr <- sqrt((1 / a_hyperthyroidism) - (1 / (a_hyperthyroidism + b_hyperthyroidism)) + (1 / c_hyperthyroidism) - (1 / (c_hyperthyroidism + d_hyperthyroidism)))
prr_lower <- exp(log(prr) - 1.96 * se_log_prr)
prr_upper <- exp(log(prr) + 1.96 * se_log_prr)
# Step 3: Calculate ROR (Reporting Odds Ratio)
ror <- (a_hyperthyroidism / b_hyperthyroidism) / (c_hyperthyroidism / d_hyperthyroidism)
# Step 4: Calculate the 95% confidence interval for ROR
se_log_ror <- sqrt((1 / a_hyperthyroidism) + (1 / b_hyperthyroidism) + (1 / c_hyperthyroidism) + (1 / d_hyperthyroidism))
ror_lower <- exp(log(ror) - 1.96 * se_log_ror)
ror_upper <- exp(log(ror) + 1.96 * se_log_ror)
# Step 5: Calculate IC (Information Component)
IC <- log2((a_hyperthyroidism * (a_hyperthyroidism + b_hyperthyroidism + c_hyperthyroidism + d_hyperthyroidism)) / ((a_hyperthyroidism + c_hyperthyroidism) * (a_hyperthyroidism + b_hyperthyroidism)))
# Step 6: Calculate the variance of IC
var_IC <- (1 / log(2)^2) * (1 / a_hyperthyroidism - 1 / (a_hyperthyroidism + b_hyperthyroidism) - 1 / (a_hyperthyroidism + c_hyperthyroidism) + 1 / (a_hyperthyroidism + b_hyperthyroidism + c_hyperthyroidism + d_hyperthyroidism))
# Step 7: Calculate the 95% confidence interval for IC
IC_lower <- IC - 1.96 * sqrt(var_IC)
IC_upper <- IC + 1.96 * sqrt(var_IC)
# Store results for the current drug (Hyperthyroidism)
results_table_hyperthyroidism <- rbind(results_table_hyperthyroidism, data.frame(
Drug = drug_of_interest,
Reaction = "Hyperthyroidism",
PRR = paste0(round(prr, 2), " (", round(prr_lower, 2), ", ", round(prr_upper, 2), ")"),
ROR = paste0(round(ror, 2), " (", round(ror_lower, 2), ", ", round(ror_upper, 2), ")"),
IC = paste0(round(IC, 2), " (", round(IC_lower, 2), ", ", round(IC_upper, 2), ")")
))
}
# Print the results table for Hyperthyroidism
print(results_table_hyperthyroidism)
# Filter for the specific drugs and count 'colitis' reactions
colitis_counts <- mydata %>%
filter(suspect_product_active_ingredients %in% c("Atezolizumab", "Avelumab", "Pembrolizumab", "Nivolumab")) %>%
rowwise() %>%
mutate(Colitis = sum(c_across(starts_with("reaction_")) == "Colitis", na.rm = TRUE)) %>%
group_by(suspect_product_active_ingredients) %>%
summarise(Colitis_Count = sum(Colitis))
# Print the result
print(colitis_counts)
# Ensure the data frames are in the same order
results_irae <- results_irae %>%
arrange(Drug)
colitis_counts <- colitis_counts %>%
arrange(suspect_product_active_ingredients)
# Subtract 'colitis' counts from total reactions
results_non_colitis <- results_irae %>%
mutate(
Non_Colitis_Reactions = Total_Reactions - colitis_counts$Colitis_Count
)
# Print the updated results
print(results_non_colitis)
# Create the new dataset by adding Non_Rash_Reactions to Total_Reactions
results_other_colitis <- data.frame(
Drug = results_non_irae$Drug,
Total_Reactions = results_non_irae$Total_Reactions + results_non_colitis$Non_Colitis_Reactions
)
# Print the new dataset
print(results_other_colitis)
# Load necessary library
library(dplyr)
# Define the list of drugs
drugs <- c("Atezolizumab", "Avelumab", "Nivolumab", "Pembrolizumab")
# Initialize an empty data frame to store results for Colitis
results_table_colitis <- data.frame()
# Loop through each drug and perform the analysis for Colitis
for (drug_of_interest in drugs) {
# Extract a, b, c, d for the current drug (for Colitis)
a_colitis <- colitis_counts %>% filter(suspect_product_active_ingredients == drug_of_interest) %>% pull(Colitis_Count)
b_colitis <- results_other_colitis %>% filter(Drug == drug_of_interest) %>% pull(Total_Reactions)
c_colitis <- colitis_counts %>% filter(suspect_product_active_ingredients != drug_of_interest) %>% summarise(sum(Colitis_Count)) %>% pull()
d_colitis <- results_other_colitis %>% filter(Drug != drug_of_interest) %>% summarise(sum(Total_Reactions)) %>% pull()
# Step 1: Calculate PRR (Proportional Reporting Ratio)
prr <- (a_colitis / (a_colitis + b_colitis)) / (c_colitis / (c_colitis + d_colitis))
# Step 2: Calculate the 95% confidence interval for PRR
se_log_prr <- sqrt((1 / a_colitis) - (1 / (a_colitis + b_colitis)) + (1 / c_colitis) - (1 / (c_colitis + d_colitis)))
prr_lower <- exp(log(prr) - 1.96 * se_log_prr)
prr_upper <- exp(log(prr) + 1.96 * se_log_prr)
# Step 3: Calculate ROR (Reporting Odds Ratio)
ror <- (a_colitis / b_colitis) / (c_colitis / d_colitis)
# Step 4: Calculate the 95% confidence interval for ROR
se_log_ror <- sqrt((1 / a_colitis) + (1 / b_colitis) + (1 / c_colitis) + (1 / d_colitis))
ror_lower <- exp(log(ror) - 1.96 * se_log_ror)
ror_upper <- exp(log(ror) + 1.96 * se_log_ror)
# Step 5: Calculate IC (Information Component)
IC <- log2((a_colitis * (a_colitis + b_colitis + c_colitis + d_colitis)) / ((a_colitis + c_colitis) * (a_colitis + b_colitis)))
# Step 6: Calculate the variance of IC
var_IC <- (1 / log(2)^2) * (1 / a_colitis - 1 / (a_colitis + b_colitis) - 1 / (a_colitis + c_colitis) + 1 / (a_colitis + b_colitis + c_colitis + d_colitis))
# Step 7: Calculate the 95% confidence interval for IC
IC_lower <- IC - 1.96 * sqrt(var_IC)
IC_upper <- IC + 1.96 * sqrt(var_IC)
# Store results for the current drug (Colitis)
results_table_colitis <- rbind(results_table_colitis, data.frame(
Drug = drug_of_interest,
Reaction = "Colitis",
PRR = paste0(round(prr, 2), " (", round(prr_lower, 2), ", ", round(prr_upper, 2), ")"),
ROR = paste0(round(ror, 2), " (", round(ror_lower, 2), ", ", round(ror_upper, 2), ")"),
IC = paste0(round(IC, 2), " (", round(IC_lower, 2), ", ", round(IC_upper, 2), ")")
))
}
# Print the results table for Colitis
print(results_table_colitis)
# Filter for the specific drugs and count 'hepatitis' reactions
hepatitis_counts <- mydata %>%
filter(suspect_product_active_ingredients %in% c("Atezolizumab", "Avelumab", "Pembrolizumab", "Nivolumab")) %>%
rowwise() %>%
mutate(Hepatitis = sum(c_across(starts_with("reaction_")) == "Hepatitis", na.rm = TRUE)) %>%
group_by(suspect_product_active_ingredients) %>%
summarise(Hepatitis_Count = sum(Hepatitis))
# Print the result
print(hepatitis_counts)
# Ensure the data frames are in the same order
results_irae <- results_irae %>%
arrange(Drug)
hepatitis_counts <- hepatitis_counts %>%
arrange(suspect_product_active_ingredients)
# Subtract 'hepatitis' counts from total reactions
results_non_hepatitis <- results_irae %>%
mutate(
Non_Hepatitis_Reactions = Total_Reactions - hepatitis_counts$Hepatitis_Count
)
# Print the updated results
print(results_non_hepatitis)
# Create the new dataset by adding Non_Hepatitis_Reactions to Total_Reactions
results_other_hepatitis <- data.frame(
Drug = results_non_irae$Drug,
Total_Reactions = results_non_irae$Total_Reactions + results_non_hepatitis$Non_Hepatitis_Reactions
)
# Print the new dataset
print(results_other_hepatitis)
# Load necessary library
library(dplyr)
# Define the list of drugs
drugs <- c("Atezolizumab", "Avelumab", "Nivolumab", "Pembrolizumab")
# Initialize an empty data frame to store results for Hepatitis
results_table_hepatitis <- data.frame()
# Loop through each drug and perform the analysis for Hepatitis
for (drug_of_interest in drugs) {
# Extract a, b, c, d for the current drug (for Hepatitis)
a_hepatitis <- hepatitis_counts %>% filter(suspect_product_active_ingredients == drug_of_interest) %>% pull(Hepatitis_Count)
b_hepatitis <- results_other_hepatitis %>% filter(Drug == drug_of_interest) %>% pull(Total_Reactions)
c_hepatitis <- hepatitis_counts %>% filter(suspect_product_active_ingredients != drug_of_interest) %>% summarise(sum(Hepatitis_Count)) %>% pull()
d_hepatitis <- results_other_hepatitis %>% filter(Drug != drug_of_interest) %>% summarise(sum(Total_Reactions)) %>% pull()
# Step 1: Calculate PRR (Proportional Reporting Ratio)
prr <- (a_hepatitis / (a_hepatitis + b_hepatitis)) / (c_hepatitis / (c_hepatitis + d_hepatitis))
# Step 2: Calculate the 95% confidence interval for PRR
se_log_prr <- sqrt((1 / a_hepatitis) - (1 / (a_hepatitis + b_hepatitis)) + (1 / c_hepatitis) - (1 / (c_hepatitis + d_hepatitis)))
prr_lower <- exp(log(prr) - 1.96 * se_log_prr)
prr_upper <- exp(log(prr) + 1.96 * se_log_prr)
# Step 3: Calculate ROR (Reporting Odds Ratio)
ror <- (a_hepatitis / b_hepatitis) / (c_hepatitis / d_hepatitis)
# Step 4: Calculate the 95% confidence interval for ROR
se_log_ror <- sqrt((1 / a_hepatitis) + (1 / b_hepatitis) + (1 / c_hepatitis) + (1 / d_hepatitis))
ror_lower <- exp(log(ror) - 1.96 * se_log_ror)
ror_upper <- exp(log(ror) + 1.96 * se_log_ror)
# Step 5: Calculate IC (Information Component)
IC <- log2((a_hepatitis * (a_hepatitis + b_hepatitis + c_hepatitis + d_hepatitis)) / ((a_hepatitis + c_hepatitis) * (a_hepatitis + b_hepatitis)))
# Step 6: Calculate the variance of IC
var_IC <- (1 / log(2)^2) * (1 / a_hepatitis - 1 / (a_hepatitis + b_hepatitis) - 1 / (a_hepatitis + c_hepatitis) + 1 / (a_hepatitis + b_hepatitis + c_hepatitis + d_hepatitis))
# Step 7: Calculate the 95% confidence interval for IC
IC_lower <- IC - 1.96 * sqrt(var_IC)
IC_upper <- IC + 1.96 * sqrt(var_IC)
# Store results for the current drug (Hepatitis)
results_table_hepatitis <- rbind(results_table_hepatitis, data.frame(
Drug = drug_of_interest,
Reaction = "Hepatitis",
PRR = paste0(round(prr, 2), " (", round(prr_lower, 2), ", ", round(prr_upper, 2), ")"),
ROR = paste0(round(ror, 2), " (", round(ror_lower, 2), ", ", round(ror_upper, 2), ")"),
IC = paste0(round(IC, 2), " (", round(IC_lower, 2), ", ", round(IC_upper, 2), ")")
))
}
# Print the results table for Hepatitis
print(results_table_hepatitis)
# Filter for the specific drugs and count 'nephritis' reactions
nephritis_counts <- mydata %>%
filter(suspect_product_active_ingredients %in% c("Atezolizumab", "Avelumab", "Pembrolizumab", "Nivolumab")) %>%
rowwise() %>%
mutate(Nephritis = sum(c_across(starts_with("reaction_")) == "Nephritis", na.rm = TRUE)) %>%
group_by(suspect_product_active_ingredients) %>%
summarise(Nephritis_Count = sum(Nephritis))
# Print the result
print(nephritis_counts)
# Ensure the data frames are in the same order
results_irae <- results_irae %>%
arrange(Drug)
nephritis_counts <- nephritis_counts %>%
arrange(suspect_product_active_ingredients)
# Subtract 'nephritis' counts from total reactions
results_non_nephritis <- results_irae %>%
mutate(
Non_Nephritis_Reactions = Total_Reactions - nephritis_counts$Nephritis_Count
)
# Print the updated results
print(results_non_nephritis)
# Create the new dataset by adding Non_Nephritis_Reactions to Total_Reactions
results_other_nephritis <- data.frame(
Drug = results_non_irae$Drug,
Total_Reactions = results_non_irae$Total_Reactions + results_non_nephritis$Non_Nephritis_Reactions
)
# Print the new dataset
print(results_other_nephritis)
# Load necessary library
library(dplyr)
# Define the list of drugs
drugs <- c("Atezolizumab", "Avelumab", "Nivolumab", "Pembrolizumab")
# Initialize an empty data frame to store results for Nephritis
results_table_nephritis <- data.frame()
# Loop through each drug and perform the analysis for Nephritis
for (drug_of_interest in drugs) {
# Extract a, b, c, d for the current drug (for Nephritis)
a_nephritis <- nephritis_counts %>% filter(suspect_product_active_ingredients == drug_of_interest) %>% pull(Nephritis_Count)
b_nephritis <- results_other_nephritis %>% filter(Drug == drug_of_interest) %>% pull(Total_Reactions)
c_nephritis <- nephritis_counts %>% filter(suspect_product_active_ingredients != drug_of_interest) %>% summarise(sum(Nephritis_Count)) %>% pull()
d_nephritis <- results_other_nephritis %>% filter(Drug != drug_of_interest) %>% summarise(sum(Total_Reactions)) %>% pull()
# Step 1: Calculate PRR (Proportional Reporting Ratio)
prr <- (a_nephritis / (a_nephritis + b_nephritis)) / (c_nephritis / (c_nephritis + d_nephritis))
# Step 2: Calculate the 95% confidence interval for PRR
se_log_prr <- sqrt((1 / a_nephritis) - (1 / (a_nephritis + b_nephritis)) + (1 / c_nephritis) - (1 / (c_nephritis + d_nephritis)))
prr_lower <- exp(log(prr) - 1.96 * se_log_prr)
prr_upper <- exp(log(prr) + 1.96 * se_log_prr)
# Step 3: Calculate ROR (Reporting Odds Ratio)
ror <- (a_nephritis / b_nephritis) / (c_nephritis / d_nephritis)
# Step 4: Calculate the 95% confidence interval for ROR
se_log_ror <- sqrt((1 / a_nephritis) + (1 / b_nephritis) + (1 / c_nephritis) + (1 / d_nephritis))
ror_lower <- exp(log(ror) - 1.96 * se_log_ror)
ror_upper <- exp(log(ror) + 1.96 * se_log_ror)
# Step 5: Calculate IC (Information Component)
IC <- log2((a_nephritis * (a_nephritis + b_nephritis + c_nephritis + d_nephritis)) / ((a_nephritis + c_nephritis) * (a_nephritis + b_nephritis)))
# Step 6: Calculate the variance of IC
var_IC <- (1 / log(2)^2) * (1 / a_nephritis - 1 / (a_nephritis + b_nephritis) - 1 / (a_nephritis + c_nephritis) + 1 / (a_nephritis + b_nephritis + c_nephritis + d_nephritis))
# Step 7: Calculate the 95% confidence interval for IC
IC_lower <- IC - 1.96 * sqrt(var_IC)
IC_upper <- IC + 1.96 * sqrt(var_IC)
# Store results for the current drug (Nephritis)
results_table_nephritis <- rbind(results_table_nephritis, data.frame(
Drug = drug_of_interest,
Reaction = "Nephritis",
PRR = paste0(round(prr, 2), " (", round(prr_lower, 2), ", ", round(prr_upper, 2), ")"),
ROR = paste0(round(ror, 2), " (", round(ror_lower, 2), ", ", round(ror_upper, 2), ")"),
IC = paste0(round(IC, 2), " (", round(IC_lower, 2), ", ", round(IC_upper, 2), ")")
))
}
# Print the results table for Nephritis
print(results_table_nephritis)
# Load necessary libraries
library(dplyr)
library(tidyr)
library(kableExtra)
# Combine all individual results tables
all_results <- bind_rows(
results_table_all_iraes,
results_table_rash,
results_table_pruritus,
results_table_hypothyroidism,
results_table_hyperthyroidism,
results_table_colitis,
results_table_hepatitis,
results_table_nephritis
)
# Pivot data to get reactions as rows and drugs as grouped columns with subcolumns for PRR, ROR, and IC
summary_table <- all_results %>%
pivot_wider(names_from = Drug, values_from = c(PRR, ROR, IC),
names_glue = "{Drug} {.value} (95% CI)")
# Highlight significant values using cell_spec
summary_table <- summary_table %>%
mutate(across(starts_with("PRR"), ~ ifelse(. > 1 & grepl("\\(1", .), cell_spec(., bold = TRUE), .))) %>%
mutate(across(starts_with("ROR"), ~ ifelse(. > 1 & grepl("\\(1", .), cell_spec(., bold = TRUE), .))) %>%
mutate(across(starts_with("IC"), ~ ifelse(. > 0 & grepl("\\(0", .), cell_spec(., bold = TRUE), .)))
# Rearrange columns to group by drug
summary_table <- summary_table %>%
select(Reaction,
starts_with("Atezolizumab"),
starts_with("Avelumab"),
starts_with("Nivolumab"),
starts_with("Pembrolizumab"))
# Create a styled summary table with drugs as main columns and PRR, ROR, IC as subcolumns
styled_summary_table <- summary_table %>%
kbl(caption = "Summary of Drug-Reaction Analysis", align = "l", escape = FALSE) %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed"), full_width = FALSE) %>%
add_header_above(c(" " = 1, "Atezolizumab" = 3, "Avelumab" = 3, "Nivolumab" = 3, "Pembrolizumab" = 3)) %>%
add_header_above(c(" " = 1, " " = 12)) %>%
column_spec(1, bold = TRUE) %>%
kable_styling(latex_options = c("HOLD_position", "scale_down")) %>%
row_spec(0, bold = TRUE, background = "#f2f2f2") %>%
column_spec(2:ncol(summary_table), border_right = TRUE)
# Render the table in Quarto
styled_summary_table
#Save the table
library(here)
styled_summary_table_path = here("results", "tables", "summarytable2.rds")
saveRDS(styled_summary_table, file = styled_summary_table_path)
# Load necessary libraries
library(dplyr)
library(tidyr)
library(huxtable)
# Combine all individual results tables
all_results <- bind_rows(
results_table_all_iraes,
results_table_rash,
results_table_pruritus,
results_table_hypothyroidism,
results_table_hyperthyroidism,
results_table_colitis,
results_table_hepatitis,
results_table_nephritis
)
# Pivot data to get reactions as rows and drugs as grouped columns with subcolumns for PRR, ROR, and IC
summary_table <- all_results %>%
pivot_wider(names_from = Drug, values_from = c(PRR, ROR, IC),
names_glue = "{Drug} {.value} (95% CI)")
# Highlight significant values using cell_spec
summary_table <- summary_table %>%
mutate(across(starts_with("PRR"), ~ ifelse(. > 1 & grepl("\\(1", .), cell_spec(., bold = TRUE), .))) %>%
mutate(across(starts_with("ROR"), ~ ifelse(. > 1 & grepl("\\(1", .), cell_spec(., bold = TRUE), .))) %>%
mutate(across(starts_with("IC"), ~ ifelse(. > 0 & grepl("\\(0", .), cell_spec(., bold = TRUE), .)))
# Rearrange columns to group by drug
summary_table <- summary_table %>%
select(Reaction,
starts_with("Atezolizumab"),
starts_with("Avelumab"),
starts_with("Nivolumab"),
starts_with("Pembrolizumab"))
# Create a huxtable for styled table
ht_summary_table <- huxtable::as_hux(summary_table)
# Add custom styling for the header and conditional bolding
ht_summary_table <- ht_summary_table %>%
set_bold(1, 1:ncol(ht_summary_table)) %>%  # Bold the first row (header)
set_caption("Summary of Drug-Reaction Analysis") %>%
set_width(1)                               # Set column width to make the table more compact
# Add conditional bold styling for significant values (customize this further)
ht_summary_table <- ht_summary_table %>%
set_bold(which(summary_table$PRR > 1 & grepl("\\(1", summary_table$PRR))) %>%
set_bold(which(summary_table$ROR > 1 & grepl("\\(1", summary_table$ROR))) %>%
set_bold(which(summary_table$IC > 0 & grepl("\\(0", summary_table$IC)))
# Load necessary libraries
library(dplyr)
library(tidyr)
library(huxtable)
# Combine all individual results tables
all_results <- bind_rows(
results_table_all_iraes,
results_table_rash,
results_table_pruritus,
results_table_hypothyroidism,
results_table_hyperthyroidism,
results_table_colitis,
results_table_hepatitis,
results_table_nephritis
)
# Pivot data to get reactions as rows and drugs as grouped columns with subcolumns for PRR, ROR, and IC
summary_table <- all_results %>%
pivot_wider(names_from = Drug, values_from = c(PRR, ROR, IC),
names_glue = "{Drug} {.value} (95% CI)")
# Check if the correct columns exist
colnames(summary_table)
# Highlight significant values using conditional bolding (PRR > 1, ROR > 1, IC > 0)
summary_table <- summary_table %>%
mutate(across(starts_with("PRR"), ~ ifelse(. > 1 & grepl("\\(1", .), "bold", .))) %>%
mutate(across(starts_with("ROR"), ~ ifelse(. > 1 & grepl("\\(1", .), "bold", .))) %>%
mutate(across(starts_with("IC"), ~ ifelse(. > 0 & grepl("\\(0", .), "bold", .)))
# Rearrange columns to group by drug
summary_table <- summary_table %>%
select(Reaction,
starts_with("Atezolizumab"),
starts_with("Avelumab"),
starts_with("Nivolumab"),
starts_with("Pembrolizumab"))
# Create a huxtable for styled table
ht_summary_table <- as_hux(summary_table)
# Add custom styling for the header and conditional bolding
ht_summary_table <- ht_summary_table %>%
set_bold(1, 1:ncol(ht_summary_table)) %>%  # Bold the first row (header)
set_caption("Summary of Drug-Reaction Analysis") %>%
set_width(1)                               # Set column width to make the table more compact
# Conditional formatting for PRR, ROR, and IC
# Apply bolding only where "bold" is specified in the columns
for (i in 2:ncol(ht_summary_table)) {
ht_summary_table <- ht_summary_table %>%
set_bold(which(ht_summary_table[, i] == "bold"), i)
}
# Display the table
ht_summary_table
# Load necessary libraries
library(dplyr)
library(tidyr)
library(huxtable)
# Combine all individual results tables
all_results <- bind_rows(
results_table_all_iraes,
results_table_rash,
results_table_pruritus,
results_table_hypothyroidism,
results_table_hyperthyroidism,
results_table_colitis,
results_table_hepatitis,
results_table_nephritis
)
# Pivot data to get reactions as rows and drugs as grouped columns with subcolumns for PRR, ROR, and IC
summary_table <- all_results %>%
pivot_wider(names_from = Drug, values_from = c(PRR, ROR, IC),
names_glue = "{Drug} {.value} (95% CI)")
# Check the structure of the table and columns
colnames(summary_table)
# Highlight significant values using conditional bolding (PRR > 1, ROR > 1, IC > 0)
summary_table <- summary_table %>%
mutate(across(starts_with("PRR"), ~ ifelse(. > 1 & grepl("\\(1", .), "bold", .))) %>%
mutate(across(starts_with("ROR"), ~ ifelse(. > 1 & grepl("\\(1", .), "bold", .))) %>%
mutate(across(starts_with("IC"), ~ ifelse(. > 0 & grepl("\\(0", .), "bold", .)))
# Split the summary_table into 4 separate tables for each drug
# Table for Atezolizumab
table_atezolizumab <- summary_table %>%
select(Reaction, starts_with("Atezolizumab")) %>%
as_hux() %>%
set_bold(1, 1:ncol(.)) %>%
set_caption("Atezolizumab Drug-Reaction Analysis") %>%
set_width(1)
# Apply bolding for significant values for Atezolizumab
for (i in 2:ncol(table_atezolizumab)) {
table_atezolizumab <- table_atezolizumab %>%
set_bold(which(table_atezolizumab[, i] == "bold"), i)
}
# Table for Avelumab
table_avelumab <- summary_table %>%
select(Reaction, starts_with("Avelumab")) %>%
as_hux() %>%
set_bold(1, 1:ncol(.)) %>%
set_caption("Avelumab Drug-Reaction Analysis") %>%
set_width(1)
# Apply bolding for significant values for Avelumab
for (i in 2:ncol(table_avelumab)) {
table_avelumab <- table_avelumab %>%
set_bold(which(table_avelumab[, i] == "bold"), i)
}
# Table for Nivolumab
table_nivolumab <- summary_table %>%
select(Reaction, starts_with("Nivolumab")) %>%
as_hux() %>%
set_bold(1, 1:ncol(.)) %>%
set_caption("Nivolumab Drug-Reaction Analysis") %>%
set_width(1)
# Apply bolding for significant values for Nivolumab
for (i in 2:ncol(table_nivolumab)) {
table_nivolumab <- table_nivolumab %>%
set_bold(which(table_nivolumab[, i] == "bold"), i)
}
# Table for Pembrolizumab
table_pembrolizumab <- summary_table %>%
select(Reaction, starts_with("Pembrolizumab")) %>%
as_hux() %>%
set_bold(1, 1:ncol(.)) %>%
set_caption("Pembrolizumab Drug-Reaction Analysis") %>%
set_width(1)
# Apply bolding for significant values for Pembrolizumab
for (i in 2:ncol(table_pembrolizumab)) {
table_pembrolizumab <- table_pembrolizumab %>%
set_bold(which(table_pembrolizumab[, i] == "bold"), i)
}
# Display each table
table_atezolizumab
table_avelumab
table_nivolumab
table_pembrolizumab
#Save the table
library(here)
# Load necessary libraries
library(here)
# Define paths for saving each table
table_atezolizumab_path <- here("results", "tables", "table_atezolizumab.rds")
table_avelumab_path <- here("results", "tables", "table_avelumab.rds")
table_nivolumab_path <- here("results", "tables", "table_nivolumab.rds")
table_pembrolizumab_path <- here("results", "tables", "table_pembrolizumab.rds")
# Save all four tables to their respective paths
saveRDS(table_atezolizumab, file = table_atezolizumab_path)
saveRDS(table_avelumab, file = table_avelumab_path)
saveRDS(table_nivolumab, file = table_nivolumab_path)
saveRDS(table_pembrolizumab, file = table_pembrolizumab_path)
